using System;
using System.Linq;

namespace PestelLib.MatchmakerShared
{
    // нельзя обфусцировать используется как JSON
    [System.Reflection.Obfuscation(Exclude = true)]
    public class MatchmakerMessage
    {
        public string Type;

        public MatchmakerMessage()
        {
            var generics = GetType().GetGenericArguments().Select(t => t.Name).ToArray();
            Type = GetType().Name + (generics.Length > 0 ? "[" + string.Join(",", generics) + "]" : "");
        }
        public static T Deserialize<T>(byte[] d, int len) where T : MatchmakerMessage
        {
            return MatchmakerMessageExtensions.Deserialize<T>(d, len);
        }
    }

    /// <summary>
    /// Client is willing to play in party
    /// </summary>
    /// <typeparam name="Request"></typeparam>
    public class ClientMatchmakerRegister<Request> : MatchmakerMessage where Request : MatchmakerRequest
    {
        public Request MatchParams;
    }

    public class ClientHostMatchAccepted : MatchmakerMessage
    {
        public Guid MatchId;
        public bool Acceptance;
    }

    /// <summary>
    /// Server demands player to host specified match
    /// If client does he must send ClientHostMatchAccepted or he will be kicked from the match
    /// </summary>
    /// <typeparam name="Request"></typeparam>
    public class ServerHostMatch<Request, MatchT> : MatchmakerMessage where Request : MatchmakerRequest where MatchT : Match<Request>
    {
        public MatchT Match;
    }

    /// <summary>
    /// Server demands you to join specified match
    /// </summary>
    /// <typeparam name="Request"></typeparam>
    public class ServerJoinMatch<Request, MatchT> : MatchmakerMessage where Request : MatchmakerRequest where MatchT : Match<Request>
    {
        public MatchT Match;
    }

    public enum KickReason
    {
        Unknown = 0,
        Timeout,            // join match command overdue
        Disconnect,         // generated by client when he loses connection
        Rebellion,          // client refused any server command
    }

    /// <summary>
    /// Server notifies what user no longer registered in a matchmaker
    /// </summary>
    public class ServerClientKick : MatchmakerMessage
    {
        public KickReason Reason;
    }

    /// <summary>
    /// Server notifies match players about matching progress (match readiness)
    /// </summary>
    /// <typeparam name="StateT"></typeparam>
    public class ServerMatchingStatus<StateT> : MatchmakerMessage where StateT : MatchingStats
    {
        public StateT State;
    }

    /// <summary>
    /// Server notifies uers about general server stats
    /// </summary>
    public class ServerCurrentStats : MatchmakerMessage
    {
        public ServerStats Stats;
    }
}
